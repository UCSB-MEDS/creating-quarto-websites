---
format: html
---

## {{< fa edit title="Pencil and paper" >}} Where you should start changing stuff

Right now, our website is built using Quarto's default styling. Let's learn about where things live and how to start customizing some stuff.

### {{< fa arrow-right title="An arrow pointing to the right" >}} **Don't mess with stuff in `/docs`** 

When you Render your site (by clicking **Build** \> **Render Website**), Quarto takes all your `.qmd` files, converts them to `.html` files (along with some other important stuff), and saves everything to your `/docs` folder. Your site now deploys from this folder, so you really don't want to mess with anything in here directly.

### {{< fa arrow-right title="An arrow pointing to the right" >}} **Add content to your landing page (`index.qmd`)**

::: {.callout-important}
## Do *not* change the name of `index.qmd`
This is the default/expected name given to website landing/home pages. If you change the name of this file, you risk breaking your deployment.
:::

Remember: `index.qmd` is the page people will arrive at when navigating to your website -- give this landing/home page a makeover by trying out some of the following:

  -   Update the yaml `title` in your `index.qmd` file. Here, I changed mine from "mysite" to my name, "Samantha Csik"

  -   Delete the sample text and begin adding your own content -- a great place to start is a short blurb introducing yourself!

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "My Quarto website home page, which now includes my name and some content, but isn't super visually pleasing..."
knitr::include_graphics("media/no_about_page.png")
```

### {{< fa arrow-right title="An arrow pointing to the right" >}} **Turn your landing page (`index.qmd`) into an "[About Page](https://quarto.org/docs/websites/website-about.html)" with a photo**

When the `about` option is added to a document's yaml, a special template will be used to layout the content of that page. Choose from one of Quarto's five [built-in templates](https://quarto.org/docs/websites/website-about.html#templates), each with a slightly different layout style. Some yaml options to play around with:

  -   `template`: choose from Quarto's built-in template options

  -   `image` (*note that this is a document-level option* i.e. is not a sub-item of `about`): supply it the file path to your photo

  -   `image-width` & `image-shape`: adjust your image's size and shape (`round`, `rounded`, `rectangle`)

  -   `links`: add buttons with links to your social media pages

```{r filename="index.qmd"}
#| eval: false
---
title: "Samantha Csik"
image: headshot.jpg # <1>
about: 
  template: trestles # <2>
  image-shape: round # <3>
  image-width: 23em # <3>
  links: # <4>
    - text: LinkedIn # <4>
      href: https://www.linkedin.com/in/samanthacsik/ # <4>
    - text: Twitter # <4>
      href: https://twitter.com/SamanthaCsik # <4>
    - text: GitHub # <4>
      href: https://github.com/samanthacsik # <4>
    - text: Email # <4>
      href: mailto:scsik@ucsb.edu # <4>
---
        
# page content excluded for brevity ~
```
1. add a photo by supplying a relative file path & image name (here, `headshot.jpg` lives in my repo's root directory)
2. use a [pre-built template](https://quarto.org/docs/websites/website-about.html#templates) (here, `trestles`) to update the layout of your landing page (or any page!)
3. set image shape (`round`, `rounded`, `rectangle`) & size
5. add button links to your favorite social media pages (e.g. LinkedIn, Twitter, GitHub, and even your email -- **Note:** the `mailto::` ahead of your email address, `mailto::youremail.com`)

::: column-margin
**Fun Tip:** Install the [Font Awesome Extension for Quarto](https://github.com/quarto-ext/fontawesome) to add free [Font Awesome](https://fontawesome.com/) `r fontawesome::fa("font-awesome", fill = "#5A5A5A", a11y = "sem")` icons to your site! Be sure to check out the [`icon` option](https://quarto.org/docs/websites/website-about.html#links) when adding linked buttons to your About Page.
:::

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "My Quarto website after updating my landing page with the built-in `trestles` template, adding an image, and linked buttons. (**Note:** using three dashes, `---`, creates a page divider, as seen between sections in the screenshot above.) Overall, a big improvement! However, our text is a bit squished in the center of the page -- we'll fix then in the next step."
knitr::include_graphics("media/about_page.png")
```

::: {.callout-note collapse=true}
## Quarto supports creating completely custom page layouts -- but I recommend sticking with a template as you're getting started

Quarto's built-in [About Page templates](https://quarto.org/docs/websites/website-about.html#templates) are great for a couple reasons, primarily:

1. they provide a quick and easy way to create visually-pleasing web pages (particularly website landing pages)
2. they take care of a lot of the finicky "under-the-hood" styling (e.g. creating "responsive" page elements i.e. automatically rearranging content to fit changing viewport sizes) that would otherwise require a fair bit of [CSS](https://www.w3schools.com/css/) knowledge

As you get more comfortable with the Quarto framework and CSS for styling webpages (we'll learn more about this in a later workshop!), you may decide to build a completely custom webpage layout. The [Openscapes website](https://openscapes.org/) ([{{< fa brands github >}} source code](https://github.com/Openscapes/website-new)) is just one example of a Quarto website with custom page layouts. You can check out the [Quarto documentation](https://quarto.org/docs/output-formats/page-layout.html) to learn more. 
:::

### {{< fa arrow-right title="An arrow pointing to the right" >}} **Modify website appearance in `_quarto.yml`** 

The `_quarto.yml` file is a configuration file -- any document rendered within the project directory will automatically inherit the metadata defined within this file. Some easy updates that make a big difference:

```{.yaml filename="_quarto.yml"}
project:
  type: website
  output-dir: docs

website:
  title: "Samantha Csik" # <1>
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd

format:
  html:
    theme: cosmo
    css: styles.css
    page-layout: full # <2>
```
1. Give your website a better title (e.g. your name)! This is the text that appears in the top left corner of your website (by default, it appears as your repo name) -- when clicked, a user will be brought back to the landing page
2. Set your `page-layout` to `full` so that your page content takes up more of the page width

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "My website with a new title (see top left corner) and with `page-layout` set to `full`, so that content doesn't appear as squished in the middle of the page."
knitr::include_graphics("media/full_page.png")
```

### {{< fa arrow-right title="An arrow pointing to the right" >}} **Add additional pages to your website** 

In the default Quarto website skeleton, there are two items in the navbar that appear as "Home" and "About" (**Note:** don't confuse the special-formatted "About Page" we created in `index.qmd` with the navbar page currently titled "About"). Those navbar tabs link to two `.html` files (`index.html` and `about.html`) and are automatically rendered when when you Build to `/docs` (i.e. you don't need to knit them manually to create the html). Adding a new page to your website requires two steps:

  a. **Create a new `.qmd` file** (**New File** \> **Quarto Document** and save it to your project's root directory) and add any content that you want to appear on that page. Here, I'm creating a new page called "All of my favorite resources!" and saved it to my root directory as `resources.qmd`.

  b. **Update `_quarto.yml`** by adding your new `.qmd` to the list of navbar pages. My website's `_quarto.yml` file now looks like this:

```{.yaml filename="_quarto.yml"}
project:
  type: website
  output-dir: docs

website:
  title: "Samantha Csik"
  navbar:
   background: primary
   left:
     - href: index.qmd
       text: Home
     - about.qmd
     - resources.qmd  # <1>

format:
  html:
    theme: cosmo
    css: styles.css

editor: visual
```
1. A newly-added navbar page. **Note:** The page name, as it appears in the navbar of your website, will be the same as whatever is listed in the `title` field of that file's yaml. For example, I have set `title: "All my favorite resources!"` in the yaml of `resources.qmd` -- this is how it will appear in my website's navbar. If you'd like the page name to appear differently in the navbar, use the `href` and `text` options together (e.g. see how `index.qmd` is rendered as `Home` in my website's navbar).

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "A newly added navpage page, titled 'All of my favorite resources!'"
knitr::include_graphics("media/resources_page.png")
```

### {{< fa arrow-right title="An arrow pointing to the right" >}} **Change the theme** 

Update the appearance of your site by choosing from one of the 25 predefined [Bootswatch themes](https://bootswatch.com/). By default, Quarto sites are built using the [cosmo](https://bootswatch.com/cosmo/) theme. Supply just one theme name to the `theme` option in your `_quarto.qmd` file:

```{.yaml filename="_quarto.yml"}
# ~ additional metadata excluded for brevity ~

# supplying just one theme ("minty")
format:
  html:
    theme: minty
    css: styles.css
```

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "With theme, 'minty', a prebuilt [Bootswatch theme](https://bootswatch.com/)"
knitr::include_graphics("media/light.png")
```

*or* supply both a dark and a light theme for users to toggle between:

```{.yaml filename="_quarto.yml"}
# ~ additional metadata excluded for brevity ~

# supplying a light ("minty") and dark ("slate") theme to toggle between
format:
  html:
    theme: 
      light: minty
      dark: slate
    css: styles.css
```

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "With light/dark theme options applied; here, the `dark` theme, which is set to the prebuilt [Bootswatch theme](https://bootswatch.com/) theme, `slate`, is toggled on."
knitr::include_graphics("media/dark.png")
```

::: callout-important
## Always "Render Website" before pushing changes that you want to deploy!

You *must* **Render Website** (under the **Build** tab) before pushing added/changed files to GitHub if you want to see those changes updated on your site. Rendering individual files alone will not work.
:::
